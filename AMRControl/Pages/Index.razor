@page "/"

@using AMRControl.Data
@using System.Text.Json
@using System.Text.Json.Nodes
@using System.Text
@inject AmrTasksService TasksService
@inject IJSRuntime _jsRuntime

<PageTitle>AMR-Control</PageTitle>

<h1>AMR controller</h1>
<br />
<div class="row">
    <div class = "col-6">
        <div class="row">
            <div class="col-12">
                <div class="card text-bg-primary" id="choose-and-start-task">
                  <div class="card-body text-center">
                      <a href="#" class="btn" id="btn-choose-and-start-task" @onclick="()=>HandleChooseTask()" data-bs-toggle="modal" data-bs-target="#generalModal" style="border: none;">
                        <h2 class="card-title">Choose and start task</h2>
                        <p class="card-text">Click here to choose a task and call the AMR to the tool-dispenser.</p>
                    </a>
                  </div>
            </div>
            </div>
        </div>
        <br />
        <div class="row">
            <div class="col-12">
                <div class="card text-bg-light" id="tool-dispensing-finished">
                  <div class="card-body text-center">
                      <a href="#" class="btn disabled" id="btn-tool-dispensing-finished" style="border: none;" @onclick="()=>HandleDispensingFinished()">
                        <h2 class="card-title">Tool dispensing finished</h2>
                        <p class="card-text">Click here when all tools that are linked to this task are placed on the AMR and send it to the workplace.</p>
                    </a>
                  </div>
            </div>
            </div>
        </div>
        <br />
        <div class="row">
            <div class="col-12">
                <div class="card text-bg-light" id="amr-arrived">
                  <div class="card-body text-center">
                      <a href="#" class="btn disabled" id="btn-amr-arrived" style="border: none;" @onclick="()=>HandleRobotArrived()">
                        <h2 class="card-title">AMR arrived</h2>
                        <p class="card-text">Click here when the AMR has arrived at the workplace.</p>
                    </a>
                  </div>
            </div>
            </div>
        </div>
        <br />
        <div class="row">
            <div class="col-6">
                <div class="card text-bg-light" id="tool-withdrawal-finished-idle">
                  <div class="card-body text-center">
                      <a href="#" class="btn disabled" id="btn-tool-withdrawal-finished" style="border: none;" @onclick="()=>HandleWithdrawalFinishedIdle()">
                        <h2 class="card-title">Send to Idle-station</h2>
                        <p class="card-text">Click here when all tools are removed from the AMR and it shall move to the idle-position.</p>
                    </a>
                  </div>
                </div>
            </div>
            <div class="col-6">
                <div class="card text-bg-light" id="tool-withdrawal-finished-toolcenter">
                  <div class="card-body text-center">
                      <a href="#" class="btn disabled" id="btn-tool-withdrawal-finished" style="border: none;" @onclick="()=>HandleWithdrawalFinishedToolcenter()">
                        <h2 class="card-title">Send to Toolcenter</h2>
                        <p class="card-text">Click here when all tools are removed from the AMR and it shall move to the Toolcenter.</p>
                    </a>
                  </div>
                </div>
            </div>
        </div>
    </div>
    <div class = "col-6">
        <h3>Current status</h3>

        @if (Tools.Count > 0)
        {
            <h4>Tools-list</h4>
            <table class="table table-striped">
                <thead>
                    <tr>
                        <th>Nr</th>
                        <th>Description</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var t in Tools)
                    {
                        <tr>
                            <td>@t.Key</td>
                            <td>@t.Value</td>
                        </tr>
                    }
                </tbody>
            </table>

            if (Components.Count > 0)
            {
                <h4>Components-list</h4>
                <table class="table table-striped">
                    <thead>
                        <tr>
                            <th>Nr</th>
                            <th>Description</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var c in Components)
                        {
                            <tr>
                                <td>@c.Key</td>
                                <td>@c.Value</td>
                            </tr>
                        }
                    </tbody>
                </table> 
            }
           

            <p>@WorkorderId</p>
        } else if (RobotIsMovingToWorkplace == true)
        {
            <p>Robot is moving to workstation: @Workstation</p>
            <p>Workstation coordinates: X = @XCoordWorkstation, Y = @YCoordWorkstation</p>
            <p>Current robot-coordinates: X = <span id="x-coordinate">0</span>, Y = <span id="y-coordinate">0</span></p>
            <p>Current robot-angle: = <span id="view-angle">0</span>, Y = <span id="view-angle">0</span></p>
            <p>Current battery-status: <span id="battery-status">0</span>%</p>

        } else if (RobotHasArrived == true)
        {
            <p>Robot has arrived at workplace @Workstation</p>
            <p>Withdrawal in progress ...</p>
        } else if (WithdrawalFinished == true)
        {
            <p>Withdrawal finished</p>
            <p>Send robot to idle-position or Toolcenter</p>
        } else
        {
            <p>waiting/idle</p>
        }
    </div>
</div>


<!-- Modal -->
<div class="modal fade" id="generalModal" tabindex="-1" aria-labelledby="generalModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-xl">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="generalModalLabel">AMR - Tasks</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <table class="table table-striped">
                    <thead>
                        <tr>
                            <th>Date</th>
                            <th>Time</th>
                            <th>Name</th>
                            <th>Workstation</th>
                            <th>Start</th>
                        </tr>
                    </thead>
                    <tbody>
                        @if (AmrTaskList != null)
                        {
                            @foreach (var t in AmrTaskList)
                            {
                                <tr>
                                    <td>@t.Date.ToLongDateString()</td>
                                    <td>@t.Date.TimeOfDay.ToString().Substring(0, 8)</td>
                                    <td>@t.TaskName</td>
                                    <td>@t.Workstation</td>
                                    <td>@if (t.IsActive == true)
                                        {
                                            <button class="btn btn-info" @onclick="()=>HandleStartTask(t.Id, t.WorkstationId)" data-bs-dismiss="modal">Start task</button>
                                        }
                                    </td>
                                </tr>
                            }
                        }
                    </tbody>
                </table>

            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
            </div>
        </div>
    </div>
</div>

<!-- Warning with Bootstrap-Toast -->
<div aria-live="polite" aria-atomic="true" class="bg-dark position-relative bd-example-toasts">
    <div class="toast-container position-fixed top-50 start-50 translate-middle">
      <div id="liveToast" class="toast" role="alert" data-autohide="false" data-delay="0" aria-live="assertive" aria-atomic="true">
        <div class="toast-header align-content-center">
          <strong class="me-auto text-danger">Tool EOL warning!</strong>
          <button type="button" class="btn-close" data-bs-dismiss="toast" aria-label="Close"></button>
        </div>
        <div class="toast-body text-warning" id="tool-warning-text">
        </div>
        <div class="row">
            <div class="col-12 text-center p-3">
                <button type="button" class="btn btn-success" data-bs-dismiss="toast" aria-label="Close">Close</button>
            </div>
         </div>
      </div>
    </div>
</div>

@code {
    private AmrTasks[]? AmrTaskList;

    protected override async Task OnInitializedAsync()
    {
        //   AmrTaskList = await TasksService.GetAmrTasksAsync(DateTime.Now);
    }

    private string Workorder = "";
    private string WorkorderId = "";
    private Dictionary<int, string> Tools = new Dictionary<int, string>();
    private Dictionary<int, string> Components = new Dictionary<int, string>();
    private string WorkstationId = "";
    private string Workstation = "";
    private float XCoordWorkstation = 0;
    private float YCoordWorkstation = 0;
    private bool RobotIsMovingToWorkplace = false;
    private bool RobotHasArrived = false;
    private bool WithdrawalFinished = false;
    private IConfigurationRoot? AppSettings = null; // Stores the AppSettings
    private string AMRId = "";
    private bool Debug = false;
    private ToolLifeData TLD = new ToolLifeData();
    private string ToolEOLWarning = "";

    async Task HandleChooseTask() // Is triggered when "Choose task" is klicked
    {
        AmrTaskList = await TasksService.GetAmrTasksAsync(DateTime.Now); // Get open tasks

        AppSettings = new ConfigurationBuilder() // Extract AppSettings from JSON-File
              .AddJsonFile("appsettings.json")
              .AddEnvironmentVariables()
              .Build();

        AMRId = "urn:ngsi-ld:AMR:" + AppSettings["AMRId"]; // Set Robot-Id
        Debug = AppSettings["debug"] == "true" ? true : false; // Store debug-status

        var Api = new ApiCalls();
        var RobotObj = JsonSerializer.Deserialize<Robot>(Api.GetEntityById(AMRId)); // Get robot-data

        if (RobotObj.location != null) // Check if location is present in the robot-object. Location is only stored if the robot has moved at least once
        {
            if (Debug) System.Diagnostics.Debug.WriteLine("------------------ X-Coord: " + RobotObj.location.value.coordinates[0]); 
            if (Debug) System.Diagnostics.Debug.WriteLine("------------------ Y-Coord: " + RobotObj.location.value.coordinates[1]);
            string angleRaw = RobotObj.location.metadata.angle.ToString();
            string angle = angleRaw.Substring(angleRaw.LastIndexOf(":")).Replace("}", "");
            if (Debug) System.Diagnostics.Debug.WriteLine("------------------ Angle: " + angle); 
        }
    }

    async Task HandleStartTask(string Id = "", string WorkstationId = "") // Is triggered when a task is started
    {
        this.WorkstationId       = WorkstationId;
        Tools.Clear(); // Clear tools-list
        Components.Clear(); // Clear components-list
        RobotIsMovingToWorkplace = false;
        RobotHasArrived          = false;
        WithdrawalFinished       = false;

        WorkorderId      = Id;
        if (Debug) System.Diagnostics.Debug.WriteLine("+++++++++++++++++++++ Workorder-Id: " + WorkorderId);   
        var Api = new ApiCalls();
        var SingleWorkorder = JsonSerializer.Deserialize<Workorder>(Api.GetEntityById(WorkorderId)); // Get workorder-ata

        int Index = 1;
        foreach(var T in SingleWorkorder.materials.value.value[0].tools) // Fill list of tools that have to be placed on the robot
        {
            Tools[Index] = "Tool-Id: " + T.id + ", turret: " + T.turret + ", station: " + T.station;
            Index++;
        }

        Index = 1;
        foreach(var C in SingleWorkorder.materials.value.value[1].components) // Fill list of components that have to be placed on the robot
        {
            Components[Index] = C.id;
            Index++;
        }

        string result = Api.UpdateEntityById(AMRId, "refDestination/value?type=AMR", "urn:ngsi-ld:Warehouse:01"); // Move the robot to the toolcenter

        var WorkstationObj = JsonSerializer.Deserialize<Workstation>(Api.GetEntityById(WorkstationId)); // Get workstation-data
        XCoordWorkstation = WorkstationObj.location.value.coordinates[0]; // Get the coordinates of a workstation to be able to show the movement of a robot to it
        YCoordWorkstation = WorkstationObj.location.value.coordinates[1]; 
        if (Debug) System.Diagnostics.Debug.WriteLine("------------------ Coordinates: " + XCoordWorkstation + " --  " + YCoordWorkstation);   
        Workstation = WorkstationObj.name.value; // Get the name ob the workstation

        await _jsRuntime.InvokeVoidAsync("TaskChosen"); // Switch to task chosen
    }

    async Task HandleDispensingFinished() // Dispensing is finished, send robot to workstation
    {
        Tools.Clear();
        Components.Clear();
        RobotHasArrived = false;
        WithdrawalFinished = false;
        RobotIsMovingToWorkplace = true;

        await _jsRuntime.InvokeVoidAsync("DispensingFinished");

        var Api = new ApiCalls();
        string result = Api.UpdateEntityById(AMRId, "refDestination/value?type=AMR", WorkstationId);
        if (Debug) System.Diagnostics.Debug.WriteLine(" ++++++++++++++++ Move-Command" + result);

        float XCoord = 0;
        float YCoord = 0;
        float Battery = 85;
        string angle = "0";
        do // Update robot-position until he arrives at the workstation
        {
            var RobotObj = JsonSerializer.Deserialize<Robot>(Api.GetEntityById(AMRId)); // Get robot-data
            if (RobotObj.location.value.coordinates[0] != null)
            {
                Battery = (float)RobotObj.battery.value;
                string angleRaw = RobotObj.location.metadata.angle.ToString();
                angle = angleRaw.Substring(angleRaw.LastIndexOf(":")).Replace("}", ""); // Extract angle from string

                if (Debug) System.Diagnostics.Debug.WriteLine("------------------ Battery: " + Battery);
                if (Debug) System.Diagnostics.Debug.WriteLine("------------------ X-Coord: " + RobotObj.location.value.coordinates[0] + ", Y-Coord: " + RobotObj.location.value.coordinates[1]);
                if (Debug) System.Diagnostics.Debug.WriteLine("------------------ Angle: " + angle);

                XCoord = (float)RobotObj.location.value.coordinates[0];
                YCoord = (float)RobotObj.location.value.coordinates[1];
            }

            await _jsRuntime.InvokeVoidAsync("UpdateCoordinates", XCoord.ToString("0.00"), YCoord.ToString("0.00"), Battery, angle); // Coordinates and angle are updated every second in the interface

            Thread.Sleep(1000);
        } while (RobotIsMovingToWorkplace == true);
    }

    async Task HandleRobotArrived() // Robot arrived at the workstation, start unloading the tools
    {
        Tools.Clear();
        Components.Clear();
        RobotHasArrived = true;
        WithdrawalFinished = false;
        RobotIsMovingToWorkplace = false;

        // Idea for future versions: Log travel-time of the AMR to gain performance statitistics
        await _jsRuntime.InvokeVoidAsync("AmrArrived");
    }

    async Task HandleWithdrawalFinishedIdle() // Withdrawal finished, send robot back to idle-station
    {
        Tools.Clear();
        Components.Clear();
        RobotHasArrived = false;
        Workstation = "";
        WithdrawalFinished = true;
        RobotIsMovingToWorkplace = false;

        var Api = new ApiCalls();
        string result = Api.UpdateEntityById(AMRId, "refDestination/value?type=AMR", "urn:ngsi-ld:Idlestation:01");
        if (Debug) System.Diagnostics.Debug.WriteLine(" ++++++++++++++++ Move-Command" + result);

        await _jsRuntime.InvokeVoidAsync("WithdrawalFinished");
    }

    async Task HandleWithdrawalFinishedToolcenter() // Withdrawal finished, send robot back to Toolcenter and delete Workorder
    {
        Tools.Clear();
        Components.Clear();
        RobotHasArrived = false;
        Workstation = "";
        WithdrawalFinished = true;
        RobotIsMovingToWorkplace = false;

        var Api = new ApiCalls();
        string result = Api.UpdateEntityById(AMRId, "refDestination/value?type=AMR", "urn:ngsi-ld:Warehouse:01");
        if (Debug) System.Diagnostics.Debug.WriteLine(" ++++++++++++++++ Move-Command" + result);
        result = Api.DeleteEntityById(WorkorderId);

        await _jsRuntime.InvokeVoidAsync("WithdrawalFinished");
    }

    protected override void OnAfterRender(bool firstRender)
    {
        if(firstRender) // Start as background-task to check for tool-life-warnings
        {
            Task task = new Task(() =>
            {
                GetToolLifecycleWarning();
            });
            task.Start();
        }
    }

    async Task GetToolLifecycleWarning() // Get and process tool-life-warnings
    {
        do // Get Tool-life-data and show a warning if needed
        {
            var ToolLifeDict = TLD.GetToolLifeData(); // Returns parse data for processing
            string Id = "";

            StringBuilder ToolWarnings = new StringBuilder();
            foreach(var entry in ToolLifeDict) // Iterate through all the items in the list and check if a warning is required
            {
                int.TryParse(entry.Value["warninglimit"], out int WarningLimit);
                int.TryParse(entry.Value["actualquantity"], out int ActualQuantity);
                Id = entry.Value["id"];

                if (ActualQuantity <= WarningLimit) // Trigger is hit, add the tool, that has to be replaced to the list
                {
                    ToolWarnings.Append("Tool EOL for Tool with Id " + entry.Value["id"]);
                    ToolWarnings.Append(" (Warning limit = " + WarningLimit + ", actual quantity = " + ActualQuantity);
                    ToolWarnings.Append("<br>");
                }
            }
            if (ToolWarnings.Length > 0) // Warnings found -> show the popup
                {
                    this.ToolEOLWarning = ToolWarnings.ToString();
                    await _jsRuntime.InvokeVoidAsync("ShowWarning", ToolWarnings.ToString());
                    var Api = new ApiCalls();
                    string result = Api.DeleteEntityById(Id);
            }

        Thread.Sleep(10000);
        } while (1 == 1);
    }
}